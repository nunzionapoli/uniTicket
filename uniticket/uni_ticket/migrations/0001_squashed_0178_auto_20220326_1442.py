# Generated by Django 3.1.6 on 2022-03-27 17:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uni_ticket.models
import uni_ticket.validators


class Migration(migrations.Migration):

    replaces = [('uni_ticket', '0001_initial'), ('uni_ticket', '0002_remove_ticketreply_attachment'), ('uni_ticket', '0003_ticketreply_attachment'), ('uni_ticket', '0004_auto_20190408_0908'), ('uni_ticket', '0005_remove_taskhistory_status'), ('uni_ticket', '0006_auto_20190409_0838'), ('uni_ticket', '0007_auto_20190411_0958'), ('uni_ticket', '0008_auto_20190415_0922'), ('uni_ticket', '0009_auto_20190415_0945'), ('uni_ticket', '0010_auto_20190415_1500'), ('uni_ticket', '0011_auto_20190415_1636'), ('uni_ticket', '0012_auto_20190416_0825'), ('uni_ticket', '0013_auto_20190416_0826'), ('uni_ticket', '0014_auto_20190418_0849'), ('uni_ticket', '0015_auto_20190419_0926'), ('uni_ticket', '0016_auto_20190424_0854'), ('uni_ticket', '0017_auto_20190424_0914'), ('uni_ticket', '0018_auto_20190424_0924'), ('uni_ticket', '0019_task_priority'), ('uni_ticket', '0020_auto_20190424_1144'), ('uni_ticket', '0021_ticketcategorycondition'), ('uni_ticket', '0022_auto_20190502_1140'), ('uni_ticket', '0023_auto_20190503_1546'), ('uni_ticket', '0024_auto_20190507_1430'), ('uni_ticket', '0025_ticketcategorycondition_is_printable'), ('uni_ticket', '0026_auto_20190513_0917'), ('uni_ticket', '0027_delete_taskattachment'), ('uni_ticket', '0028_delete_ticketattachment'), ('uni_ticket', '0029_auto_20190513_1058'), ('uni_ticket', '0030_auto_20190520_1532'), ('uni_ticket', '0031_auto_20190521_1229'), ('uni_ticket', '0032_auto_20190521_1230'), ('uni_ticket', '0033_auto_20190628_1034'), ('uni_ticket', '0034_auto_20190704_0821'), ('uni_ticket', '0035_auto_20190725_1632'), ('uni_ticket', '0036_ticketreply_read'), ('uni_ticket', '0037_auto_20190730_1200'), ('uni_ticket', '0038_remove_ticketreply_from_owner'), ('uni_ticket', '0039_auto_20190730_1232'), ('uni_ticket', '0040_ticketreply_read_date'), ('uni_ticket', '0041_auto_20190806_0903'), ('uni_ticket', '0042_auto_20190806_0908'), ('uni_ticket', '0043_auto_20190807_0832'), ('uni_ticket', '0044_auto_20190807_0850'), ('uni_ticket', '0045_auto_20190807_0851'), ('uni_ticket', '0046_ticket2ticket_note'), ('uni_ticket', '0047_auto_20190904_0941'), ('uni_ticket', '0048_auto_20190904_1028'), ('uni_ticket', '0049_ticketassignment_readonly'), ('uni_ticket', '0050_ticketassignment_modified'), ('uni_ticket', '0051_remove_ticketassignment_modified'), ('uni_ticket', '0052_ticketassignment_modified'), ('uni_ticket', '0053_delete_tickethistory'), ('uni_ticket', '0054_delete_taskhistory'), ('uni_ticket', '0055_auto_20200310_1148'), ('uni_ticket', '0056_auto_20200313_1406'), ('uni_ticket', '0057_auto_20200317_1018'), ('uni_ticket', '0058_auto_20200317_1021'), ('uni_ticket', '0059_auto_20200317_1030'), ('uni_ticket', '0060_auto_20200317_1031'), ('uni_ticket', '0061_auto_20200317_1033'), ('uni_ticket', '0062_auto_20200317_1211'), ('uni_ticket', '0063_auto_20200317_1228'), ('uni_ticket', '0064_auto_20200317_1229'), ('uni_ticket', '0065_ticketcategory_show_heading_text'), ('uni_ticket', '0066_auto_20200319_0859'), ('uni_ticket', '0067_auto_20200320_0814'), ('uni_ticket', '0068_auto_20200320_1902'), ('uni_ticket', '0069_auto_20200323_0838'), ('uni_ticket', '0070_auto_20200323_0910'), ('uni_ticket', '0071_auto_20200325_0803'), ('uni_ticket', '0072_ticketcategorytask'), ('uni_ticket', '0073_ticketcategorytask_is_active'), ('uni_ticket', '0074_auto_20200327_1038'), ('uni_ticket', '0075_auto_20200330_1155'), ('uni_ticket', '0076_auto_20200330_1159'), ('uni_ticket', '0077_auto_20200330_1300'), ('uni_ticket', '0078_auto_20200330_1301'), ('uni_ticket', '0079_auto_20200331_1003'), ('uni_ticket', '0080_ticketcategorycondition_is_collapsable'), ('uni_ticket', '0081_auto_20200402_0109'), ('uni_ticket', '0082_task_closed_by'), ('uni_ticket', '0083_ticketcategory_allow_anonymous'), ('uni_ticket', '0084_auto_20200406_1116'), ('uni_ticket', '0085_auto_20200406_1148'), ('uni_ticket', '0086_auto_20200406_1149'), ('uni_ticket', '0087_auto_20200406_1150'), ('uni_ticket', '0088_auto_20200406_1156'), ('uni_ticket', '0089_auto_20200416_1205'), ('uni_ticket', '0090_auto_20200416_1210'), ('uni_ticket', '0091_ticketcategory_receive_email'), ('uni_ticket', '0092_auto_20200420_1151'), ('uni_ticket', '0093_auto_20200424_0834'), ('uni_ticket', '0094_auto_20200424_1612'), ('uni_ticket', '0095_auto_20200428_1303'), ('uni_ticket', '0096_auto_20200428_1533'), ('uni_ticket', '0097_auto_20200428_1537'), ('uni_ticket', '0098_auto_20200429_1213'), ('uni_ticket', '0099_userstructuremanager'), ('uni_ticket', '0100_auto_20200504_2302'), ('uni_ticket', '0101_delete_userstructuremanager'), ('uni_ticket', '0102_auto_20200505_1142'), ('uni_ticket', '0103_auto_20200510_1021'), ('uni_ticket', '0104_organizationalstructurewsarchipro'), ('uni_ticket', '0105_auto_20200520_1059'), ('uni_ticket', '0106_auto_20200520_1103'), ('uni_ticket', '0107_ticketcategorywsarchipro'), ('uni_ticket', '0108_ticketcategorywsarchipro_name'), ('uni_ticket', '0109_ticketcategorywsarchipro_created'), ('uni_ticket', '0110_auto_20200521_0926'), ('uni_ticket', '0111_auto_20200521_1019'), ('uni_ticket', '0112_auto_20200521_1042'), ('uni_ticket', '0113_auto_20200521_1146'), ('uni_ticket', '0114_auto_20200521_1300'), ('uni_ticket', '0115_auto_20200522_1200'), ('uni_ticket', '0116_auto_20200522_1227'), ('uni_ticket', '0117_auto_20200522_1230'), ('uni_ticket', '0118_auto_20200522_1318'), ('uni_ticket', '0119_auto_20200527_1454'), ('uni_ticket', '0120_auto_20200601_2347'), ('uni_ticket', '0121_auto_20200612_0001'), ('uni_ticket', '0122_ticketcategorydefaultreply'), ('uni_ticket', '0123_auto_20200616_0912'), ('uni_ticket', '0124_ticket_closing_state'), ('uni_ticket', '0125_auto_20200618_0926'), ('uni_ticket', '0126_auto_20200618_0927'), ('uni_ticket', '0127_auto_20200618_0933'), ('uni_ticket', '0128_auto_20200618_1003'), ('uni_ticket', '0129_ticketcategory_allowed_users'), ('uni_ticket', '0130_auto_20200623_0927'), ('uni_ticket', '0131_auto_20200626_1006'), ('uni_ticket', '0132_auto_20200626_1007'), ('uni_ticket', '0133_auto_20200626_1013'), ('uni_ticket', '0134_auto_20200626_1014'), ('uni_ticket', '0135_auto_20200626_1019'), ('uni_ticket', '0136_auto_20200626_1119'), ('uni_ticket', '0137_auto_20200630_1024'), ('uni_ticket', '0138_auto_20200630_1030'), ('uni_ticket', '0139_remove_organizationalstructurewsarchipro_protocollo_template'), ('uni_ticket', '0140_auto_20200701_1222'), ('uni_ticket', '0141_auto_20200702_1124'), ('uni_ticket', '0142_auto_20200702_1126'), ('uni_ticket', '0143_auto_20200702_1239'), ('uni_ticket', '0144_auto_20200702_1244'), ('uni_ticket', '0145_auto_20200703_0913'), ('uni_ticket', '0146_auto_20200716_1051'), ('uni_ticket', '0147_ticket_is_notification'), ('uni_ticket', '0148_auto_20200723_1525'), ('uni_ticket', '0149_auto_20200723_1546'), ('uni_ticket', '0150_auto_20200723_1559'), ('uni_ticket', '0151_auto_20201020_0848'), ('uni_ticket', '0152_task_is_public'), ('uni_ticket', '0153_ticketcategorytask_is_public'), ('uni_ticket', '0154_auto_20201106_1249'), ('uni_ticket', '0155_auto_20201127_0854'), ('uni_ticket', '0156_auto_20201127_0855'), ('uni_ticket', '0157_auto_20201127_1106'), ('uni_ticket', '0158_organizationalstructurealert'), ('uni_ticket', '0159_auto_20210305_1217'), ('uni_ticket', '0160_ticketcategory_user_multiple_open_tickets'), ('uni_ticket', '0161_auto_20210924_1330'), ('uni_ticket', '0162_auto_20210924_1336'), ('uni_ticket', '0163_alter_ticketcategorywsprotocollo_protocollo_fascicolo_numero'), ('uni_ticket', '0164_auto_20210928_1036'), ('uni_ticket', '0165_ticketcategorywsprotocollo_protocollo_uo_rpa'), ('uni_ticket', '0166_alter_ticketcategorywsprotocollo_protocollo_uo'), ('uni_ticket', '0167_auto_20210928_1152'), ('uni_ticket', '0168_ticketcategory_footer_text'), ('uni_ticket', '0169_alter_ticketcategory_footer_text'), ('uni_ticket', '0170_alter_ticketcategory_footer_text'), ('uni_ticket', '0171_ticketcategorywsprotocollo_protocollo_send_email'), ('uni_ticket', '0172_alter_ticketcategorywsprotocollo_protocollo_email'), ('uni_ticket', '0173_auto_20211111_0923'), ('uni_ticket', '0174_ticketcategorywsprotocollo_protocollo_uo_rpa_username'), ('uni_ticket', '0175_alter_ticketcategorywsprotocollo_protocollo_uo_rpa'), ('uni_ticket', '0176_ticketcategorywsprotocollo_protocollo_uo_rpa_matricola'), ('uni_ticket', '0177_auto_20220326_1157'), ('uni_ticket', '0178_auto_20220326_1442')]

    initial = True

    dependencies = [
        ('organizational_area', '0021_auto_20190503_1546'),
        ('organizational_area', '0032_organizationalstructureoffice_is_private'),
        ('organizational_area', '0025_auto_20200406_1150'),
        ('organizational_area', '0028_auto_20200505_1149'),
        ('organizational_area', '0017_organizationalstructure_slug'),
        ('organizational_area', '0020_auto_20190415_0945'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('code', models.CharField(default='1default4', max_length=255, unique=True)),
                ('data_chiusura', models.DateTimeField(blank=True, null=True)),
                ('is_chiuso', models.BooleanField(default=False)),
                ('motivazione_chiusura', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Task',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='TicketCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='invalid_name', message='Il nome deve contenere almeno un carattere alfabetico', regex='^(?=.*[a-zA-Z])')])),
                ('slug', models.SlugField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False, help_text='Se disabilitato, non sarà visibile in Aggiungi Richiesta')),
                ('organizational_office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizational_area.organizationalstructureoffice')),
                ('organizational_structure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organizational_area.organizationalstructure')),
                ('allow_guest', models.BooleanField(default=True, verbose_name='Accessibile a Ospiti')),
                ('allow_employee', models.BooleanField(default=True, verbose_name='Accessibile a Dipendenti')),
                ('allow_user', models.BooleanField(default=True, verbose_name='Accessibile a Studenti')),
                ('show_heading_text', models.BooleanField(default=True, verbose_name='Mostra agli utenti un testo di accettazione in fase di apertura nuova richiesta')),
                ('confirm_message_text', models.TextField(blank=True, help_text='Es: \'Hai correttamente confermato la tua partecipazione\'. Apri e chiudi le parentesi graffe per inserire l\'oggetto della richiesta. Lascia vuoto per usare il testo predefinito "Richiesta "{}" creata con successo"', max_length=500, null=True, verbose_name='Messaggio di conferma')),
                ('is_notification', models.BooleanField(default=False, help_text='Richiesta che viene automaticamente presa in carico', verbose_name='Richiesta di tipo Notifica')),
                ('allow_anonymous', models.BooleanField(default=False, verbose_name='Accessibile a Utenti anonimi')),
                ('not_available_message', models.CharField(blank=True, help_text='Viene mostrato agli utenti se cercano di accedere al form', max_length=255, null=True, verbose_name='Messaggio se non attiva')),
                ('receive_email', models.BooleanField(default=False, help_text='Invia email a operatori per ogni richiesta aperta', verbose_name='Mail ad operatori')),
                ('protocol_required', models.BooleanField(default=False, verbose_name='Protocollo obbligatorio')),
                ('allowed_users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('date_end', models.DateTimeField(blank=True, null=True, verbose_name='Attiva fino al')),
                ('date_start', models.DateTimeField(blank=True, null=True, verbose_name='Attiva dal')),
                ('user_multiple_open_tickets', models.BooleanField(default=True, verbose_name='Gli utenti possono aprire più richieste contemporaneamente')),
                ('footer_text', models.TextField(blank=True, null=True, verbose_name='Testo in calce per versione stampabile')),
            ],
            options={
                'verbose_name': 'Categoria della Richiesta',
                'verbose_name_plural': 'Categorie delle Richieste',
                'ordering': ['name'],
                'unique_together': {('slug', 'organizational_structure')},
            },
        ),
        migrations.CreateModel(
            name='TicketCategoryModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=False)),
                ('ticket_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticketcategory')),
            ],
            options={
                'verbose_name': 'Modulo di Inserimento Richiesta',
                'verbose_name_plural': 'Moduli di Inserimento Richieste',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=255, unique=True)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('modulo_compilato', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('closed_date', models.DateTimeField(blank=True, null=True)),
                ('closing_reason', models.TextField(blank=True, null=True)),
                ('priority', models.IntegerField(choices=[(-2, 'Molto alta'), (-1, 'Alta'), (0, 'Normale'), (1, 'Bassa'), (2, 'Molto bassa')], default=0)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_by_user', to=settings.AUTH_USER_MODEL)),
                ('input_module', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='uni_ticket.ticketcategorymodule')),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_by_user', to=settings.AUTH_USER_MODEL)),
                ('compiled', models.DateTimeField(blank=True, null=True)),
                ('compiled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compiled_by_user', to=settings.AUTH_USER_MODEL)),
                ('protocol_date', models.DateTimeField(blank=True, help_text='Quando la richiesta è stato protocollata', null=True)),
                ('protocol_number', models.CharField(blank=True, default='', max_length=32)),
                ('closing_status', models.IntegerField(blank=True, choices=[(-1, 'Rifiutata'), (0, 'Non risolta'), (1, 'Risolta con successo'), (2, 'Non definita')], null=True)),
                ('is_notification', models.BooleanField(default=False, verbose_name='Richiesta di tipo Notifica')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Ticket',
                'ordering': ['is_closed', 'priority', '-created', 'code'],
            },
        ),
        migrations.CreateModel(
            name='Task2Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uni_ticket.task')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uni_ticket.ticket')),
            ],
            options={
                'verbose_name': 'Dipendenza Ticket da Task',
                'verbose_name_plural': 'Dipendenze Ticket da Task',
                'ordering': ['task', 'ticket'],
                'unique_together': {('ticket', 'task')},
            },
        ),
        migrations.AddField(
            model_name='task',
            name='ticket',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticket'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='task',
            name='priority',
            field=models.IntegerField(choices=[(-2, 'Molto alta'), (-1, 'Alta'), (0, 'Normale'), (1, 'Bassa'), (2, 'Molto bassa')], default=0),
        ),
        migrations.CreateModel(
            name='Ticket2Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main', to='uni_ticket.ticket')),
                ('subordinate_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subordinate', to='uni_ticket.ticket')),
                ('note', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Dipendenza Ticket',
                'verbose_name_plural': 'Dipendenze Ticket',
                'ordering': ['subordinate_ticket', 'main_ticket'],
                'unique_together': {('subordinate_ticket', 'main_ticket')},
            },
        ),
        migrations.RenameField(
            model_name='task',
            old_name='is_chiuso',
            new_name='is_closed',
        ),
        migrations.RenameField(
            model_name='task',
            old_name='data_chiusura',
            new_name='closed_date',
        ),
        migrations.RenameField(
            model_name='task',
            old_name='motivazione_chiusura',
            new_name='closing_reason',
        ),
        migrations.CreateModel(
            name='TicketAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('office', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organizational_area.organizationalstructureoffice')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticket')),
                ('follow', models.BooleanField(default=True)),
                ('readonly', models.BooleanField(default=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('taken_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='taken_by_operator', to=settings.AUTH_USER_MODEL)),
                ('taken_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Competenza Ticket',
                'verbose_name_plural': 'Competenza Ticket',
                'ordering': ['created'],
                'unique_together': {('ticket', 'office')},
            },
        ),
        migrations.AddField(
            model_name='task',
            name='closed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_closed_by_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TicketCategoryCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField()),
                ('ordinamento', models.PositiveIntegerField(blank=True, default=0)),
                ('is_active', models.BooleanField(default=True, verbose_name='Visibile agli utenti')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticketcategory')),
                ('is_printable', models.BooleanField(default=False, verbose_name='Visibile nella versione stampabile')),
                ('attachment', models.FileField(blank=True, max_length=255, null=True, upload_to=uni_ticket.models._attachment_upload, validators=[uni_ticket.validators.validate_file_extension, uni_ticket.validators.validate_file_size, uni_ticket.validators.validate_file_length])),
                ('is_collapsable', models.BooleanField(default=True, verbose_name='Collassabile')),
            ],
            options={
                'verbose_name': 'Clausola tipologia di richiesta ticket',
                'verbose_name_plural': 'Clausole tipologia di richiesta ticket',
                'ordering': ('ordinamento',),
            },
        ),
        migrations.CreateModel(
            name='TicketReply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('text', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('structure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizational_area.organizationalstructure')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticket')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('attachment', models.FileField(blank=True, max_length=255, null=True, upload_to=uni_ticket.models._attachment_upload, validators=[uni_ticket.validators.validate_file_extension, uni_ticket.validators.validate_file_size, uni_ticket.validators.validate_file_length])),
                ('read_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_replies_read_by', to=settings.AUTH_USER_MODEL)),
                ('read_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Domande/Risposte Ticket',
                'verbose_name_plural': 'Domande/Risposte Ticket',
                'ordering': ['ticket', 'created'],
            },
        ),
        migrations.AddField(
            model_name='task',
            name='attachment',
            field=models.FileField(blank=True, max_length=255, null=True, upload_to=uni_ticket.models._attachment_upload, validators=[uni_ticket.validators.validate_file_extension, uni_ticket.validators.validate_file_size, uni_ticket.validators.validate_file_length]),
        ),
        migrations.CreateModel(
            name='TicketCategoryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('priority', models.IntegerField(choices=[(-2, 'Molto alta'), (-1, 'Alta'), (0, 'Normale'), (1, 'Bassa'), (2, 'Molto bassa')], default=0)),
                ('attachment', models.FileField(blank=True, max_length=255, null=True, upload_to=uni_ticket.models._attachment_upload, validators=[uni_ticket.validators.validate_file_extension, uni_ticket.validators.validate_file_size, uni_ticket.validators.validate_file_length])),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticketcategory')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('is_active', models.BooleanField(default=False, verbose_name='Visibile nei ticket')),
                ('is_public', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Task predefinito',
                'verbose_name_plural': 'Task predefiniti',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='TicketCategoryInputList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('field_type', models.CharField(choices=[('CustomFileField', 'Allegato (generico)'), ('CustomImageField', 'Allegato Immagine'), ('CustomSignedP7MField', 'Allegato P7M firmato'), ('CustomPDFField', 'Allegato PDF'), ('CustomSignedPdfField', 'Allegato PDF firmato'), ('CustomDataField', 'Allegato file dati (JSON, CSV, Excel)'), ('CustomHiddenField', 'Campo nascosto'), ('CustomCaptchaComplexField', 'Captcha'), ('CheckBoxField', 'Checkbox'), ('MultiCheckBoxField', 'Checkbox multi-valore'), ('BaseDateField', 'Data'), ('BaseDateTimeField', 'Data e Ora (campi separati)'), ('BaseDateTimeSimpleField', 'Data e ora (campo singolo)'), ('DateStartEndComplexField', 'Data inizio e Data fine'), ('CustomEmailField', 'E-mail'), ('CustomIPField', 'Indirizzo IP'), ('CustomComplexTableField', 'Inserimenti multipli'), ('CustomRadioBoxField', 'Lista di opzioni (checkbox)'), ('CustomSelectBoxField', 'Lista di opzioni (tendina)'), ('CustomMACField', 'MAC Address'), ('PositiveFloatField', 'Numero con virgola positivo'), ('PositiveIntegerField', 'Numero intero positivo'), ('ProtocolloField', 'Protocollo (tipo/numero/data)'), ('CustomCharField', 'Testo'), ('TextAreaField', 'Testo lungo'), ('CustomURLField', 'URL')], max_length=100)),
                ('valore', models.TextField(blank=True, default='', help_text="Viene considerato solo se si sceglie 'Menu a tendina' oppure 'Serie di Opzioni'. (Es: valore1;valore2;valore3...)", max_length=20000, verbose_name='Lista di Valori')),
                ('is_required', models.BooleanField(default=True)),
                ('aiuto', models.CharField(blank=True, default='', max_length=254)),
                ('ordinamento', models.PositiveIntegerField(blank=True, default=0, help_text="posizione nell'ordinamento")),
                ('category_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticketcategorymodule')),
                ('pre_text', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Modulo di inserimento',
                'verbose_name_plural': 'Moduli di inserimento',
                'ordering': ['ordinamento'],
            },
        ),
        migrations.AddField(
            model_name='task',
            name='closing_status',
            field=models.IntegerField(blank=True, choices=[(-1, 'Rifiutata'), (0, 'Non risolta'), (1, 'Risolta con successo'), (2, 'Non definita')], null=True),
        ),
        migrations.AlterField(
            model_name='task',
            name='created',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='task',
            name='is_public',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='TicketCategoryDefaultReply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('ticket_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticketcategory')),
            ],
            options={
                'verbose_name': 'Risposta predefinita',
                'verbose_name_plural': 'Risposte predefinite',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationalStructureAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateTimeField(blank=True, null=True, verbose_name='Attiva dal')),
                ('date_end', models.DateTimeField(blank=True, null=True, verbose_name='Attiva fino al')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('text', models.TextField(max_length=500)),
                ('ordinamento', models.PositiveIntegerField(blank=True, default=0)),
                ('is_active', models.BooleanField(default=False)),
                ('organizational_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizational_area.organizationalstructure')),
            ],
            options={
                'verbose_name': 'Alert di struttura agli utenti',
                'ordering': ['ordinamento', 'created'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationalStructureWSProtocollo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Denominazione configurazione')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('protocollo_username', models.CharField(max_length=255, verbose_name='Username')),
                ('protocollo_password', models.CharField(max_length=255, verbose_name='Password')),
                ('protocollo_aoo', models.CharField(max_length=12, verbose_name='AOO')),
                ('protocollo_agd', models.CharField(blank=True, default='', max_length=12, verbose_name='AGD')),
                ('organizational_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizational_area.organizationalstructure')),
            ],
            options={
                'verbose_name': 'Configurazione WS Protocollo Struttura',
                'verbose_name_plural': 'Configurazioni WS Protocollo Strutture',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='TicketCategoryWSProtocollo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=False)),
                ('protocollo_cod_titolario', models.CharField(choices=[('Amministrazione', (('1/1', 'Normativa e relativa attuazione'), ('1/2', 'Statuto'), ('1/3', 'Regolamenti'), ('1/4', 'Stemma, gonfalone e sigillo'), ('1/5', "Sistema informativo, sicurezza dell'informazione e sistema informatico"), ('1/6', 'Protezione dei dati personali'), ('1/7', 'Archivio'), ('1/8', 'Trasparenza e relazioni con il pubblico'), ('1/9', 'Strategie per il personale, organigramma e funzionigramma'), ('1/10', 'Rapporti sindacali e contrattazione'), ('1/11', 'Controllo di gestione e sistema qualità'), ('1/12', 'Statistica e auditing'), ('1/13', 'Elezioni e designazioni'), ('1/14', 'Associazioni e attività culturali, sportive e ricreative'), ('1/15', 'Editoria e attività informativo-promozionale'), ('1/16', 'Onorificenze, cerimoniale e attività di rappresentanza'), ('1/17', 'Politiche e interventi per le pari opportunità'), ('1/18', 'Interventi di carattere politico, economico, sociale e umanitario'))), ('Organi di governo, gestione, controllo, consulenza e garanzia', (('2/1', 'Rettore'), ('2/2', 'Prorettore vicario e delegati'), ('2/3', 'Direttore generale'), ('2/4', 'Direttore'), ('2/5', 'Presidente'), ('2/6', 'Senato accademico'), ('2/7', 'Consiglio di amministrazione'), ('2/8', 'Consiglio'), ('2/9', 'Giunta'), ('2/10', 'Commissione didattica paritetica docenti-studenti'), ('2/11', 'Nucleo di valutazione'), ('2/12', 'Collegio dei revisori dei conti'), ('2/13', 'Collegio di disciplina (per i docenti)'), ('2/14', 'Senato degli studenti'), ('2/15', 'Comitato unico di garanzia e per le pari opportunità'), ('2/16', 'Comitato tecnico scientifico'), ('2/17', 'Conferenza dei rettori delle università italiane - CRUI'), ('2/18', 'Comitato regionale di coordinamento'), ('2/19', 'Comitato per lo sport universitario'))), ('Didattica, ricerca, programmazione e sviluppo', (('3/1', 'Ordinamento didattico'), ('3/2', 'Corsi di studio'), ('3/3', 'Corsi a ordinamento speciale'), ('3/4', 'Corsi di specializzazione'), ('3/5', 'Master'), ('3/6', 'Corsi di dottorato'), ('3/7', 'Corsi di perfezionamento e corsi di formazione permanente'), ('3/8', 'Programmazione didattica, orario delle lezioni, gestione delle aule e degli spazi'), ('3/9', 'Gestione di esami di profitto, di laurea e di prove di idoneità'), ('3/10', 'Programmazione e sviluppo, comprese aree, macroaree e settori scientifico-disciplinari'), ('3/11', 'Strategie e valutazione della didattica e della ricerca'), ('3/12', 'Premi e borse di studio finalizzati e vincolati'), ('3/13', 'Progetti e finanziamenti'), ('3/14', 'Accordi per la didattica e la ricerca'), ('3/15', 'Rapporti con enti e istituti di area socio-sanitaria'), ('3/16', "Opere dell'ingegno, brevetti e imprenditoria della ricerca"), ('3/17', "Piani di sviluppo dell'università"), ('3/18', 'Cooperazione con paesi in via di sviluppo'), ('3/19', 'Attività per conto terzi'))), ('Attività giuridico-legale', (('4/1', 'Contenzioso'), ('4/2', 'Atti di liberalità'), ('4/3', 'Violazioni amministrative e reati'), ('4/4', 'Responsabilità civile, penale e amministrativa del personale'), ('4/5', 'Pareri e consulenze'))), ('Studenti e laureati', (('5/1', 'Orientamento, informazione e tutorato'), ('5/2', 'Selezioni, immatricolazioni e ammissioni'), ('5/3', 'Trasferimenti e passaggi'), ('5/4', 'Cursus studiorum e provvedimenti disciplinari'), ('5/5', 'Diritto allo studio, assicurazioni, benefici economici, tasse e contributi'), ('5/6', 'Tirocinio, formazione e attività di ricerca'), ('5/7', 'Servizi di assistenza socio-sanitaria e a richiesta'), ('5/8', 'Conclusione e cessazione della carriera di studio'), ('5/9', 'Esami di stato e ordini professionali'), ('5/10', 'Associazionismo, goliardia e manifestazioni organizzate da studenti o ex studenti'), ('5/11', 'Benefici Legge 390/91'), ('5/12', 'Servizi abitativi e mensa per gli studenti'), ('5/13', 'Attività culturali e ricreative'))), ('Strutture didattiche, di ricerca e di servizio', (('6/1', 'Poli'), ('6/2', 'Scuole e strutture di raccordo'), ('6/3', 'Dipartimenti'), ('6/4', 'Strutture a ordinamento speciale'), ('6/5', 'Scuole di specializzazione'), ('6/6', 'Scuole di dottorato'), ('6/7', 'Scuole interdipartimentali'), ('6/8', 'Centri'), ('6/9', 'Sistema bibliotecario'), ('6/10', 'Musei, pinacoteche e collezioni'), ('6/11', 'Consorzi ed enti a partecipazione universitaria'), ('6/12', 'Fondazioni'), ('6/13', 'Servizi di ristorazione, alloggi e foresterie'))), ('Personale', (('7/1', 'Concorsi e selezioni'), ('7/2', 'Assunzioni e cessazioni'), ('7/3', 'Comandi e distacchi'), ('7/4', 'Mansioni e incarichi'), ('7/5', 'Carriera e inquadramenti'), ('7/6', 'Retribuzione e compensi'), ('7/7', 'Adempimenti fiscali, contributivi e assicurativi'), ('7/8', 'Pre-ruolo, trattamento di quiescenza, buonuscita'), ('7/9', 'Dichiarazioni di infermità ed equo indennizzo'), ('7/10', 'Servizi a domanda individuale'), ('7/11', 'Assenze'), ('7/12', 'Tutela della salute e sorveglianza sanitaria'), ('7/13', 'Valutazione, giudizi di merito e provvedimenti disciplinari'), ('7/14', 'Formazione e aggiornamento professionale'), ('7/15', 'Deontologia professionale ed etica del lavoro'), ('7/16', 'Personale non strutturato'))), ('Finanza, contabilità e bilancio', (('8/1', 'Ricavi ed entrate'), ('8/2', 'Costi e uscite'), ('8/3', 'Bilancio'), ('8/4', 'Tesoreria, cassa e istituti di credito'), ('8/5', 'Imposte, tasse, ritenute previdenziali e assistenziali'))), ('Edilizia e territorio', (('9/1', 'Progettazione e costruzione di opere edilizie con relativi impianti'), ('9/2', "Manutenzione ordinaria, straordinaria, ristrutturazione, restauro e destinazione d'uso"), ('9/3', 'Sicurezza e messa a norma degli ambienti di lavoro'), ('9/4', 'Telefonia e infrastruttura informatica'), ('9/5', 'Programmazione Territoriale'))), ('Patrimonio, economato e provveditorato', (('10/1', 'Acquisizione e gestione di beni immobili e relativi servizi'), ('10/2', 'Locazione di beni immobili, di beni mobili e relativi servizi'), ('10/3', 'Alienazione di beni immobili e di beni mobili'), ('10/4', 'Acquisizione e fornitura di beni mobili, di materiali e attrezzature non tecniche e di servizi'), ('10/5', 'Manutenzione di beni mobili'), ('10/6', 'Materiali, attrezzature, impiantistica e adempimenti tecnico-normativi'), ('10/7', 'Partecipazioni e investimenti finanziari'), ('10/8', 'Inventario, rendiconto patrimoniale, beni in comodato'), ('10/9', 'Patrimonio culturale – Tutela e valorizzazione'), ('10/10', 'Gestione dei rifiuti'), ('10/11', 'Albo dei fornitori')))], max_length=12, verbose_name='Codice titolario')),
                ('protocollo_fascicolo_numero', models.CharField(blank=True, default='', max_length=255, verbose_name='Fascicolo numero')),
                ('protocollo_fascicolo_anno', models.IntegerField(blank=True, null=True, verbose_name='Fascicolo anno')),
                ('ticket_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni_ticket.ticketcategory')),
                ('protocollo_email', models.EmailField(blank=True, help_text='default: settings.PROTOCOL_EMAIL_DEFAULT', max_length=255, null=True, verbose_name='E-mail')),
                ('protocollo_uo', models.CharField(choices=[('2015.1', 'AMMINISTRAZIONE CTC'), ('2013.1', 'AMMINISTRAZIONE DEMACS'), ('2025.1', 'AMMINISTRAZIONE DESF'), ('2020.1', 'AMMINISTRAZIONE DIAM'), ('2014.1', 'AMMINISTRAZIONE DIBEST'), ('2022.1', 'AMMINISTRAZIONE DICES'), ('2019.1', 'AMMINISTRAZIONE DIMEG'), ('2017.1', 'AMMINISTRAZIONE DIMES'), ('2018.1', 'AMMINISTRAZIONE DINCI'), ('2024.1', 'AMMINISTRAZIONE DISCAG'), ('0', "UNIVERSITA' DELLA CALABRIA")], max_length=12, verbose_name='UO')),
                ('protocollo_uo_rpa', models.CharField(blank=True, default='', help_text='Nominativo RPA', max_length=255, verbose_name='RPA')),
                ('protocollo_send_email', models.BooleanField(default=True, verbose_name='Invia e-mail a RPA')),
                ('protocollo_uo_rpa_username', models.CharField(blank=True, default='', help_text='Username RPA sul sistema di protocollo', max_length=255, verbose_name='RPA username')),
                ('protocollo_uo_rpa_matricola', models.CharField(blank=True, default='', help_text='Matricola RPA sul sistema di protocollo', max_length=255, verbose_name='RPA matricola')),
            ],
            options={
                'verbose_name': 'Configurazione WS Protocollo Categoria',
                'verbose_name_plural': 'Configurazioni WS Protocollo Categorie',
                'ordering': ['-created'],
            },
        ),
    ]
